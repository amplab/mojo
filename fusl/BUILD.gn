# Copyright 2016 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Define the sysroot directory.
sysroot = "$root_out_dir/sysroot"

config("fusl_config") {
  cflags = [
    # Flags from musl
    "-std=c99",
    "-ffreestanding",
    "-nostdinc",

    "-D_XOPEN_SOURCE=700",

    "-Wa,--noexecstack",

    "-fomit-frame-pointer",
    "-fno-unwind-tables",
    "-fno-asynchronous-unwind-tables",
    "-ffunction-sections",
    "-fdata-sections",
    "-Werror=implicit-function-declaration",
    "-Werror=implicit-int",
    "-Werror=pointer-sign",
    "-Werror=pointer-arith",
  ]

  include_dirs = []

  # Arch specific includes, these need to come before the general includes.
  if (current_cpu == "x64") {
    include_dirs += [ "arch/x86_64" ]
  }

  # General includes, these need to come after the arch specific includes.
  # src/internal must come before include.
  include_dirs += [
    "src/internal",
    "include",
  ]
}

# See the discussion below about what these files are, and their
# relationship to other C runtime files.
source_set("crt") {
  cflags = []

  configs = []
  configs += [ ":fusl_config" ]

  cflags += [
    "-DCRT",
    "-fno-stack-protector",
  ]

  sources = [
    "crt/Scrt1.c",
    "crt/crt1.c",
    "crt/rcrt1.c",
  ]

  if (target_cpu == "x64") {
    sources += [
      "crt/x86_64/crti.s",
      "crt/x86_64/crtn.s",
    ]
  } else {
    sources += [
      "crt/crti.c",
      "crt/crtn.c",
    ]
  }
}

if (current_cpu != "x64") {
  source_set("libc_generic_no_stack_protector") {
    cflags = []

    configs = []
    configs += [ ":fusl_config" ]

    cflags += [ "-fno-stack-protector" ]

    sources = [
      "src/string/memcpy.c",
      "src/string/memset.c",
      "src/thread/__set_thread_area.c",
    ]
  }

  source_set("libc_generic") {
    configs = []
    configs += [ ":fusl_config" ]

    sources = [
      "src/fenv/fenv.c",
      "src/internal/syscall.c",
      "src/ldso/dlsym.c",
      "src/ldso/tlsdesc.c",
      "src/math/__invtrigl.c",
      "src/math/acosl.c",
      "src/math/asinl.c",
      "src/math/atan2l.c",
      "src/math/atanl.c",
      "src/math/ceill.c",
      "src/math/exp2l.c",
      "src/math/expl.c",
      "src/math/expm1l.c",
      "src/math/fabs.c",
      "src/math/fabsf.c",
      "src/math/fabsl.c",
      "src/math/floorl.c",
      "src/math/fmodl.c",
      "src/math/llrint.c",
      "src/math/llrintf.c",
      "src/math/llrintl.c",
      "src/math/log10l.c",
      "src/math/log1pl.c",
      "src/math/log2l.c",
      "src/math/logl.c",
      "src/math/lrint.c",
      "src/math/lrintf.c",
      "src/math/lrintl.c",
      "src/math/remainderl.c",
      "src/math/rintl.c",
      "src/math/sqrt.c",
      "src/math/sqrtf.c",
      "src/math/sqrtl.c",
      "src/math/truncl.c",
      "src/process/vfork.c",
      "src/setjmp/longjmp.c",
      "src/setjmp/setjmp.c",
      "src/signal/restore.c",
      "src/signal/sigsetjmp.c",
      "src/string/memmove.c",
      "src/thread/__unmapself.c",
      "src/thread/clone.c",
      "src/thread/syscall_cp.c",
    ]

    deps = [
      ":libc_generic_no_stack_protector",
    ]
  }
}

if (current_cpu == "x64") {
  source_set("libc_x64") {
    configs = []
    configs += [ ":fusl_config" ]

    sources = [
      "src/fenv/x86_64/fenv.s",
      "src/internal/x86_64/syscall.s",
      "src/ldso/x86_64/dlsym.s",
      "src/ldso/x86_64/tlsdesc.s",
      "src/math/x86_64/__invtrigl.s",
      "src/math/x86_64/acosl.s",
      "src/math/x86_64/asinl.s",
      "src/math/x86_64/atan2l.s",
      "src/math/x86_64/atanl.s",
      "src/math/x86_64/ceill.s",
      "src/math/x86_64/exp2l.s",
      "src/math/x86_64/expl.s",
      "src/math/x86_64/expm1l.s",
      "src/math/x86_64/fabs.s",
      "src/math/x86_64/fabsf.s",
      "src/math/x86_64/fabsl.s",
      "src/math/x86_64/floorl.s",
      "src/math/x86_64/fmodl.s",
      "src/math/x86_64/llrint.s",
      "src/math/x86_64/llrintf.s",
      "src/math/x86_64/llrintl.s",
      "src/math/x86_64/log10l.s",
      "src/math/x86_64/log1pl.s",
      "src/math/x86_64/log2l.s",
      "src/math/x86_64/logl.s",
      "src/math/x86_64/lrint.s",
      "src/math/x86_64/lrintf.s",
      "src/math/x86_64/lrintl.s",
      "src/math/x86_64/remainderl.s",
      "src/math/x86_64/rintl.s",
      "src/math/x86_64/sqrt.s",
      "src/math/x86_64/sqrtf.s",
      "src/math/x86_64/sqrtl.s",
      "src/math/x86_64/truncl.s",
      "src/process/x86_64/vfork.s",
      "src/setjmp/x86_64/longjmp.s",
      "src/setjmp/x86_64/setjmp.s",
      "src/signal/x86_64/restore.s",
      "src/signal/x86_64/sigsetjmp.s",
      "src/string/x86_64/memcpy.s",
      "src/string/x86_64/memmove.s",
      "src/string/x86_64/memset.s",
      "src/thread/x86_64/__set_thread_area.s",
      "src/thread/x86_64/__unmapself.s",
      "src/thread/x86_64/clone.s",
      "src/thread/x86_64/syscall_cp.s",
    ]
  }
}

source_set("libc_no_stack_protector") {
  cflags = []

  configs = []
  configs += [ ":fusl_config" ]

  cflags += [ "-fno-stack-protector" ]

  sources = [
    "src/env/__init_tls.c",
    "src/env/__libc_start_main.c",
    "src/env/__stack_chk_fail.c",
    "src/ldso/dlstart.c",
    "src/ldso/dynlink.c",
  ]
}

static_library("libc") {
  configs = []
  configs += [ ":fusl_config" ]

  complete_static_lib = true

  deps = [
    ":libc_no_stack_protector",
    "src/aio",
    "src/complex",
    "src/conf",
    "src/crypt",
    "src/ctype",
    "src/dirent",
    "src/env",
    "src/errno",
    "src/exit",
    "src/fcntl",
    "src/fenv",
    "src/internal",
    "src/ipc",
    "src/ldso",
    "src/legacy",
    "src/linux",
    "src/locale",
    "src/malloc",
    "src/math",
    "src/misc",
    "src/mman",
    "src/mq",
    "src/multibyte",
    "src/network",
    "src/passwd",
    "src/prng",
    "src/process",
    "src/regex",
    "src/sched",
    "src/search",
    "src/select",
    "src/setjmp",
    "src/signal",
    "src/stat",
    "src/stdio",
    "src/stdlib",
    "src/string",
    "src/temp",
    "src/termios",
    "src/thread",
    "src/time",
    "src/unistd",
  ]

  # Arch specific sources.
  deps += [ ":libc_${current_cpu}" ]
}

# For simplicity, musl places all its symbols in libc. To support
# linking against e.g. libm, either implicitly or with an explicit -lm
# flag, we build empty libraries.
static_library("libm") {
  complete_static_lib = true
}

template("copy_objects") {
  assert(defined(invoker.input_dir), "input_dir must be defined")
  assert(defined(invoker.output_dir), "output_dir must be defined")
  object_prefix = ""
  if (defined(invoker.object_prefix)) {
    object_prefix = invoker.object_prefix
  }
  foreach(file, invoker.sources) {
    copy("copy_${file}") {
      sources = [
        rebase_path("${invoker.input_dir}/${object_prefix}${file}",
                    "",
                    target_out_dir),
      ]
      outputs = [
        "${invoker.output_dir}/${file}",
      ]
      deps = [
        ":crt",
      ]
    }
  }
  group(target_name) {
    deps = [
      ":crt",
    ]
    foreach(file, invoker.sources) {
      deps += [ ":copy_$file" ]
    }
  }
}

sysroot_lib_dir = "${sysroot}/usr/lib"
sysroot_include_dir = "${sysroot}/usr/include"

copy_objects("copy_crt_objects") {
  sources = [
    "Scrt1.o",
    "crt1.o",
    "rcrt1.o",
  ]
  object_prefix = "crt."
  input_dir = "crt"
  output_dir = "${sysroot_lib_dir}"
}

copy_objects("copy_crt_x64_objects") {
  sources = [
    "crti.o",
    "crtn.o",
  ]
  object_prefix = "crt."
  input_dir = "crt/x86_64"
  output_dir = "${sysroot_lib_dir}"
}

copy("copy_include") {
  sources = [
    "include",
  ]
  outputs = [
    "${sysroot_include_dir}",
  ]
}

copy("copy_include_bits") {
  deps = [
    ":copy_include",
  ]
  if (current_cpu == "x64") {
    sources = [
      "arch/x86_64/bits",
    ]
  }
  outputs = [
    "${sysroot_include_dir}/{{source_name_part}}",
  ]
}

copy("copy_libs") {
  deps = [
    ":libc",
    ":libm",
  ]
  sources = [
    "${target_out_dir}/libc.a",
    "${target_out_dir}/libm.a",
  ]
  outputs = [
    "${sysroot_lib_dir}/{{source_name_part}}.a",
  ]
}

group("copy_sysroot") {
  deps = [
    ":copy_crt_objects",
    ":copy_include",
    ":copy_include_bits",
    ":copy_libs",
  ]
  if (current_cpu == "x64") {
    deps += [ ":copy_crt_x64_objects" ]
  }
}

# The crtXXX.o files that are copied elsewhere in this file define
# _start, and the machinery to implement calling into the init and
# fini sections. These things are libc dependent and hence part of
# libc.
#
# Unlike the other crtXXX.o files, crtbegin and crtend, are provided
# by the toolchain, not the libc. So we steal them from the host.
#
# crtbegin and crtend know how to call constructors and destructors.
#
# libgcc provides runtime support, and so also comes from the
# compiler. Things in here are stack unwinding, arithmetic not
# supported on the target architecture, and so on.
#
# The best document I am aware of describing the different variants of
# these files (and crtXXX.o above) is
# https://dev.gentoo.org/~vapier/crt.txt
#
# S and _s mean shared or PIE
# T and _eh mean static
action("finish_sysroot") {
  script = "tools/populate_crt.py"

  clang = "//third_party/llvm-build/Release+Asserts/bin/clang"
  target = "$sysroot/usr/lib"

  files = [
    "crtbegin.o",
    "crtbeginS.o",
    "crtbeginT.o",
    "crtend.o",
    "crtendS.o",

    "libgcc.a",
    "libgcc_eh.a",
    "libgcc_s.so",
  ]

  args = [
    rebase_path(clang),
    rebase_path(target),
  ]
  args += files

  outputs = [
    "$target/crtbegin.o",
    "$target/crtbeginSo.o",
    "$target/crtbeginT.o",
    "$target/crtend.o",
    "$target/crtendS.o",

    "$target/libgcc.a",
    "$target/libgcc_eh.a",
    "$target/libgcc_s.so",
  ]

  deps = [
    ":copy_sysroot",
  ]
}

config("sysroot_config") {
  rebased_sysroot = rebase_path(sysroot)

  cflags = [
    "--sysroot=$rebased_sysroot",
    "-fPIC",
    "-static",
  ]

  ldflags = [
    "--sysroot=$rebased_sysroot",
    "-static",
  ]
}

executable("empty_main") {
  configs = []
  configs += [ ":sysroot_config" ]

  sources = [
    "test/empty_main.c",
  ]

  deps = [
    ":finish_sysroot",
  ]
}

group("fusl") {
  deps = [
    ":crt(//build/toolchain/fusl:fusl_$current_cpu)",
    ":empty_main(//build/toolchain/fusl:fusl_$current_cpu)",
    ":finish_sysroot(//build/toolchain/fusl:fusl_$current_cpu)",
    ":libc(//build/toolchain/fusl:fusl_$current_cpu)",
  ]
}
